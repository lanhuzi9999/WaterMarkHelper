ContentProvider
 1、是Android的四大组件之一
 2、是Android中的数据共享的标准方式
ContentProvider中的Uri
 组成部分
  协议：content
  授权串：自定义字符串用于唯一的标识一个ContentProvider
  路径：  用于标识该ContentProvider中的不同的表或视图
  ID  :   用于标识指定数据的id
 分类
  单条数据访问的Uri(指定id)
  多条数据访问的Uri(不指定id)
创建一个ContentProvider的步骤
 1、准备被共享的数据源
 2、创建类 扩展自 ContentProvider
 3、注册：
    <provider android:name="类名"  android:authorities="授权串"
        android:exported="true"/>
 4、重写增删改查方法
    1）分析Uri  确定访问的表 或 条件
    2）执行具体操作

访问ContentProvider
 1、获取ContentResolver对象的引用
 2、准备用于访问指定ContentProvider的Uri
 3、准备具体的数据、条件、列名等相关的数据信息
 4、调用ContentResolver的增删改查方法,执行操作

UriMatcher
 构造方法:UriMatcher(int noMatch)
 主要方法:
  void addURI(String authority,String path,int code)
  int match(Uri uri)

Uri
 实例化：public static Uri parse(String url)
 主要方法：
  String getLastPathSegment()
  static Uri withAppendedPath(Uri uri,String path)

ContentUris
 主要方法:
  static Uri withAppendedId(Uri uri,long id)
  static long parseId(Uri uri)

媒体提供程序
 音频相关的表或视图
  view_audio:_id _data title album artist composer _display_name _size duration album_key
  view_albums:_id  album album_key  album_art
  view_artists:_id  artist
 相关API
  MediaStore
   Audio
    Media
    Albums
    Artists
   Images
   Video

----------------------------------------------------
Intent
 两类：
  显式意图
  隐式意图
 六大属性：
  ComponentName component  //显式意图的相关属性

  //隐式意图先骨干属性
  String action
  String category
  Uri data

  int flags
  Bundle extras //在intent中传递附加参数的键值对集合
 主要构造方法:
  Intent()
  Intent(Context context,Class cls)
 主要方法:
  void setComponent(ComponentName component)
  void setAction(String action)
  void addCategory(String category) 
  void setData(Uri uri)
  void setFlags(int flags)
  void putExtras(Bundle extras)
  Bundle getExtras()

  void putExtra(String key,int value)
  void putExtra(String key,String value)
  ...
  void getIntExtra(String key,int defaulValue)
  void getStringExtra(String key,String defaulValue)
  ...


ComponentName
 构造方法:
  ComponentName(Context pkg,Class cls)
  ComponentName(Context pkg,String clsName)
  ComponentName(String pkgName,String clsName)

隐式意图的匹配测试原则:
 action的测试原则:
  1、每个intent对象中最多只能包含一个action
  2、intent-filter中可以声明多个action
  3、如果intent对象中包含的action，在intent-filter声明的action范围内
     则该intent对象 通过intent-filter的action测试
  4、如果intent对象中不包含action，则默认可以通过所有的action测试
     除非intent-filter中也未声明action
  5、如果intent-filter中未声明action，则拒绝所有的action测试
 category
  1、每个intent对象中可以包含多个category
  2、每个intent-filter中可以声明多个category
  3、如果intent中包含的category是intent-filter中声明的category的子集
     则intent对象通过该intent-filter的category测试
  4、如果intent中不包含category，则默认通过所有的category测试
  注意：传入到startActivity方法中的 intent 自动追加一个category
        "android.intent.category.DEFAULT"(Intent.CATEGORY_DEFAULT)
 data
  1、intent对象中最多只能包含一个data，该data是一个具体的Uri对象
  2、在intent-filter中可以声明本组件所支持的数据格式：
     如 协议  主机地址  端口号 路径  媒体类型等信息
  3、如果intent对象中包含的uri对象 符合intent-filter中data所声明的格式
     则该intent通过intent-filter的data测试

-----------------------------------------------------------
发送广播步骤
 1、创建一个意图
 2、调用context.sendBroadcast(intent)发送广播

接收广播的步骤
 1、创建一个类 扩展自BroadcastReceiver
 2、注册
  1）静态注册，在AndroidManifest.xml中 
   <receiver android:name="类名">
   </receiver> 
  2）动态注册：使用代码注册
   context.registerReceiver(BroadcastReceiver receiver,IntentFilter filter)
   context.unRegisterReceiver(BroadcastReceiver receiver)
 3、重写onReceive方法

BroadcastReceiver
 1、是Android的四大组件之一
 2、用于接收广播 并对接收到的广播进行处理
 3、onReceive方法的执行时间不能超过10s
 4、主要生命周期方法
   onReceive(Context context ,Intent intent)


ANR
 1、界面操作5s得不到响应
 2、广播接收器的onReceive方法执行时间超过10s


 









