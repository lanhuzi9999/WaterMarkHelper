Activity
 1、是Android的四大组件之一（Component ）
 2、是Context
 3、是控制器
 4、Activity中包含一个PhoneWindow对象
    PhoneWindow中包含一个DecorView对象
    DecorView类是FrameLayout的子类
 
 
View
 1、在Android中一切可见的对象都是View或包含View
 2、View分为两类：
   1）容器
     addView
   2）控件 
 3、Android中的View的组织形式――视图树  
 
Context
 1、对资源的访问能力
 2、对系统服务的访问能力
 3、对组件的访问能力
 
 4、Android中的Context对象有三种：
   Activity实例
   Service实例
   Application实例
 5、一个Android进程中包含多少个Context实例
   Activity实例数+Service实例数+1   
   
   
ListView的使用和优化
 1、ListView是一种容器
 2、ListView不支持addView操作
 3、ListView使用Adapter接口来获取 所要显示的数据和子item
 
适配器模式：
 1、三种角色：
   源对象
   适配器：实现目标接口 包含源对象
   目标接口 
Adapter接口的主要方法：
 int getCount()
 View getView(...)
 long getItemId(int position)
 Object getItem(int position)
 
ListView的优化:
 1、重用convertView
 2、使用ViewHolder避免重复的 子控件查找  
 
Http协议：
 请求的格式:
  请求行（协议版本 url 方法）
  消息头
  
  请求实体
 响应的格式:   
  状态行（状态码 描述 协议）
  消息头
  
  响应实体

HttpClient访问服务端
1、步骤
 1）创建客户端
 2）创建请求对象
 3）执行请求获得响应
 4）如果响应码为200，则获取响应实体对象
 5）解析实体对象
2、相关类型   
HttpClient
 主要方法：
  HttpResponse execute(HttpUriRequest request)
  
HttpUriRequest
 HttpGet
  构造方法:
   HttpGet(String uri)
   HttpGet()
  
 HttpPost
  构造方法:
   HttpPost(String uri)
   HttpPost()
  主要方法：
   void setEntity(HttpEntity entity) 
 
HttpResponse
 主要方法：
  StatusLine getStatusLine()
  Header[] getAllHeaders()
  HttpEntity getEntity()
StatusLine
 主要方法:
  int getStatusCode()
Header
 主要方法:
  String getName()
  String getValue()
HttpEntity
 主要方法:
  InputStream getContent()
  Header getContentType()
  long getContentLength()
EntityUtils
 主要静态方法:
  String toString(HttpEntity entity)
  String toString(HttpEntity entity,String encoding)
  String toByteArray(HttpEntity entity)
UrlEncodedFormEntity 
 构造方法:
  UrlEncodedFormEntity(List<NameValuePair> params)
  
---------------------------------------------------------------
1、查询基本的音乐信息
实体类
 Music
工具类
 HttpUtils
  HttpEntity getEntity(String uri,List<NameValuePair> params,int method)
  long getLength(HttpEntity entity)
  InputStream getStream(HttpEntity entity)
  byte[] getBytes(HttpEntity entity)
  
 BitmapUtils
  Bitmap loadBitmap(String path)
  Bitmap loadBitmap(byte[] data,int width,int height)
  void save(Bitmap bm,File file)
业务类
 MusicXmlParser
  ArrayList<Music> parse(InputStream in)
 MusicBiz
  ArrayList<Music> getMusics(String uri){
   //连接服务端获取响应实体输入流
   HttpEntity entity = HttpUtils.getEntity(uri,null,HttpUtils.METHOD_GET);
   InputStream in = HttpUtils.getStream(entity);
   //解析响应实体输入流 获取Music集合
   ArrayList<Music> musics = new MusicXmlParser().parse(in);
   //返回music集合
   return musics;
  }
  
 AsyncMusicParseTask<String,String,ArrayList<Music>>
  ArrayList<Music> doInBackground(String...params){
    //连接服务端获取音乐列表
    ArrayList<Music> musics = new MusicBiz().getMusics();
    
    return musics;
  }
  void onPostExecute(ArrayList<Music> result){
    //使用异步任务的执行结果 更新界面
  }
  
适配器
 MusicAdapter
  int getCount()
  View getView(int position,View convertView,View group)
  long getItemId(int position)
  Music getItem(int position)
  void changeData(ArrayList<Music> musics){
    //更新adapter中的数据集
    //更新listview
  }
 
MainActivity
 onCreate中      
  1、ListView的初始化（使用空集合）
  2、异步加载音乐列表
2、加载专辑图片
MusicAdapter
 private boolean isLoop;
 private ArrayList<ImageLoadTask> tasks;
 private Thread workThread;
 private Handler handler;
 private HashMap<String,SoftReferences<Bitmap>> caches;
 
 在构造方法中:
  初始化上述变量
  isLoop = true;
  tasks = new ...;
  caches = new ...;
  handler = new Handler(){
   public void handleMessage(Message msg){
    //从消息中获取下载完成的任务
    //根据任务路径 从listview中查找合适的imageview
    //如果imageview未被重用，则显示图片
   }
  };
  workThread = new Thread(){
    public void run(){
      while(isLoop){
        //轮询任务集合
        while(!tasks.isEmpty（））{
          //移除并获取第一条任务
          //执行加载任务
          //发送消息到主线程
          //添加到caches缓存
        }
        //线程等待
      }
    }
  };
  workThread.start();
 
 
 在getView中：
  当需要显示专辑图片时 
   显示默认图片
   获取专辑路径
   如果 caches缓存中存在该路径的图片，
     则获取图片并显示
     方法结束
   创建任务对象
   添加到任务集合
   唤醒线程  
---------------------------------------------------- 
AsyncImageLoader
 private Callback callback;
 public AsyncImageLoader (Callback callback){
  //当图片加载完成时 
  callback.imageLoaded(path,bitmap);
 }
 
 Bitmap loadImage(String path)
---------------------------------------------------- 
Callback callback = new Callback(){
 public void imageLoaded(String path,Bitmap bitmap){
 
 }
};
AsyncImageLoader loader = new AsyncImageLoader(callback); 
loader.loadImage(path); 
-------------------------------------------------
Activity的状态
 交互状态(运行状态)
 暂停状态(可见状态)
 停止状态(后台状态)
 
Activity的生命周期方法
 onCreate
 onStart
 onResume
 onPause
 onStop
 onDestroy
 
Activity的状态转换
 1、启动Activity时
  onCreate-》onStart-》onResume
 2、从运行状态转换为暂停状态
  onPause
 3、从运行状态转换为停止状态 
  onPause-》onStop
 4、结束运行中的Activity
  onPause->onStop->onDestroy 
 5、从暂停状态恢复为运行状态
  onResume
 6、从停止状态恢复为运行状态
  onRestart->onStart->onResume
 7、从暂停状态转为停止状态
  onStop
 8、从暂停状态销毁Activity
  onStop-》onDestroy
 9、从停止状态销毁Activity
  onDestroy     
    
  
   
       
  
   
  
 


